// ===================================================
// CONFIGURA√á√ÉO DIN√ÇMICA DA API - N√ÉO MINIFICAR
// ===================================================
// Este arquivo pode ser editado ap√≥s o deploy sem recompilar
// Coloque este arquivo na mesma pasta do index.html no IIS

window.API_CONFIG = {
  // ===== CONFIGURA√á√ÉO AUTOM√ÅTICA =====
  // Detecta automaticamente o servidor baseado na URL atual
  getApiUrl: function() {
    const protocol = window.location.protocol;
    const hostname = window.location.hostname;
    const fullUrl = window.location.href;
    
    console.log('üîß [CONFIG] Detectando ambiente automaticamente...');
    console.log('üîß [CONFIG] Protocol:', protocol);
    console.log('üîß [CONFIG] Hostname:', hostname);
    console.log('üîß [CONFIG] Full URL:', fullUrl);
    
    // Desenvolvimento local
    if (hostname === 'localhost' || hostname === '127.0.0.1') {
      if (window.location.port === '8000') {
        // Rodando no servidor de desenvolvimento (frontend na porta 8000)
        // Usar backend de HOMOLOGA√á√ÉO (porta 4001) para testes locais
        console.log('üîß [CONFIG] Ambiente: Desenvolvimento local (porta 8000) ‚Üí Backend HOMOLOGA√á√ÉO');
        console.log('üîß [CONFIG] Backend: http://localhost:4001/api (Homologa√ß√£o)');
        return 'http://localhost:4001/api';
      }
      // Rodando no IIS com proxy reverso
      console.log('üîß [CONFIG] Ambiente: IIS local com proxy reverso');
      return '/api';
    }
    
    // Detec√ß√£o autom√°tica baseada no dom√≠nio
    if (hostname.includes('recebhomolog.mercocamptech.com.br') || fullUrl.includes('recebhomolog')) {
      // Ambiente de homologa√ß√£o - backend na porta 4001
      console.log('üîß [CONFIG] Ambiente: HOMOLOGA√á√ÉO - Backend porta 4001');
      return '/api'; // Proxy reverso configurado para redirecionar para porta 4001
    }
    
    if (hostname.includes('recebimento.mercocamptech.com.br') || fullUrl.includes('recebimento')) {
      // Ambiente de produ√ß√£o - backend na porta 4000
      console.log('üîß [CONFIG] Ambiente: PRODU√á√ÉO - Backend porta 4000');
      return '/api'; // Proxy reverso configurado para redirecionar para porta 4000
    }
    
    // Fallback para produ√ß√£o
    console.log('üîß [CONFIG] Ambiente: FALLBACK (produ√ß√£o)');
    return '/api';
  },
  
  // ===== CONFIGURA√á√ÉO MANUAL (OPCIONAL) =====
  // Descomente UMA das linhas abaixo e configure com seu servidor
  // Isso sobrescreve a detec√ß√£o autom√°tica
  
  // Op√ß√£o 1: IP fixo da rede local
  // API_URL: 'http://192.168.1.100:4000/api',
  
  // Op√ß√£o 2: Nome do servidor na rede
  // API_URL: 'http://servidor-app:4000/api',
  
  // Op√ß√£o 3: Dom√≠nio completo
  // API_URL: 'http://app.empresa.local:4000/api',
  
  // ===== CONFIGURA√á√ïES ADICIONAIS =====
  TIMEOUT: 10000,        // Timeout das requisi√ß√µes (10 segundos)
  RETRY_ATTEMPTS: 3,     // Tentativas em caso de erro
  
  // ===== FLAGS DE DESENVOLVIMENTO =====
  ENABLE_DEBUG: true,    // Ativa logs detalhados no console - TEMPORARIAMENTE ATIVADO PARA DEBUG
  ENABLE_MOCK: false,    // Usa dados mockados (desenvolvimento)
  
  // ===== IDENTIFICA√á√ÉO DO AMBIENTE =====
  ENVIRONMENT: 'production', // 'development', 'staging', 'production'
  VERSION: '1.0.0'
};

// ===== N√ÉO EDITE ABAIXO DESTA LINHA =====

// Determinar URL final da API
window.API_URL = window.API_CONFIG.API_URL || window.API_CONFIG.getApiUrl();

// Log da configura√ß√£o (apenas em debug)
if (window.API_CONFIG.ENABLE_DEBUG) {
  console.log('========================================');
  console.log('Configura√ß√£o da API carregada:');
  console.log('URL da API:', window.API_URL);
  console.log('Ambiente:', window.API_CONFIG.ENVIRONMENT);
  console.log('Vers√£o:', window.API_CONFIG.VERSION);
  console.log('========================================');
}

// Fun√ß√£o helper para fazer requisi√ß√µes
window.apiRequest = function(endpoint, options = {}) {
  const url = `${window.API_URL}${endpoint}`;
  
  // Adicionar timeout padr√£o
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), window.API_CONFIG.TIMEOUT);
  
  // Configura√ß√µes padr√£o
  const defaultOptions = {
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    },
    signal: controller.signal,
    ...options
  };
  
  return fetch(url, defaultOptions)
    .finally(() => clearTimeout(timeoutId))
    .catch(error => {
      if (error.name === 'AbortError') {
        throw new Error('Requisi√ß√£o expirou (timeout)');
      }
      throw error;
    });
};

